package com.brogames.bro;

import com.brogames.bro.objecttypes.*;
import com.brogames.bro.objecttypes.objects.Object;
import com.brogames.bro.objecttypes.items.Item;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.os.Bundle;

public class Board {

	// Basic information
	private int width, height;
	private float xPos, yPos;
	private int lRem, rRem, uRem, dRem;
	private int objectType, sObjectType, tObjectType;
	private Object object, sObject, tObject;
	private Item item;
	private boolean hasSecondLayer, hasThirdLayer, isObstacle, selected, hasItem;
	private Paint selectColor = new Paint();
	private static final float selectSpeed = 4;
	
	public Board(int x, int y, int objectType, Bundle boardSize) {
		width = boardSize.getInt("boardWidth");
		height = boardSize.getInt("boardHeight");

		xPos = x * width;
		yPos = y * height;

		this.objectType = objectType;
		hasSecondLayer = hasThirdLayer = hasItem = false;
		
		selected = false;
		lRem = rRem = uRem = dRem = 0;
		selectColor.setARGB(100, 255, 255, 255);

		object = ObjectGetter.setObject(objectType);

		if (object.isObstacle())
			isObstacle = true;
	}

	public Board(int x, int y, int objectType, int sObjectType,  Bundle boardSize) {
		width = boardSize.getInt("boardWidth");
		height = boardSize.getInt("boardHeight");

		xPos = x * width;
		yPos = y * height;

		this.objectType = objectType;
		hasItem = false;

		if (sObjectType == ObjectType.LOG) {

			this.tObjectType = sObjectType;
			hasSecondLayer = false;
			hasThirdLayer = true;

			object = ObjectGetter.setObject(objectType);
			tObject = ObjectGetter.setObject(sObjectType);

			if (object.isObstacle() || tObject.isObstacle())
				isObstacle = true;
		} else {

			this.sObjectType = sObjectType;
			hasSecondLayer = true;
			hasThirdLayer = false;

			object = ObjectGetter.setObject(objectType);
			sObject = ObjectGetter.setObject(sObjectType);

			if (object.isObstacle() || sObject.isObstacle())
				isObstacle = true;
		}
		
		selected = false;
		lRem = rRem = uRem = dRem = 0;
		selectColor.setARGB(100, 255, 255, 255);
	}

	public void draw(Canvas canvas, float xPos, float yPos) {
		if (object.getBmp() != null)
			canvas.drawBitmap(object.getBmp(), xPos, yPos, null);
		else
			canvas.drawRect(xPos, yPos, xPos + width, yPos + height, object.getColor());

		if (selected){
			canvas.drawRect(xPos + rRem, yPos + dRem, xPos + width - lRem, yPos + height - uRem, selectColor);
			removeSelectionAnimation();
		}
		
		if(hasItem)
			if (item.getBmp() != null)
				canvas.drawBitmap(item.getBmp(), xPos, yPos, null);
			else
				canvas.drawCircle(xPos+(width/2), yPos+(width/2), width/4, item.getColor());
	}

	public void drawSecondLayer(Canvas canvas, float xPos, float yPos) {
		if (sObject.getBmp() != null)
			canvas.drawBitmap(sObject.getBmp(), xPos, yPos, null);
		else
			canvas.drawRect(xPos, yPos, xPos + width, yPos + height, sObject.getColor());
	}

	public void drawThirdLayer(Canvas canvas, float xPos, float yPos) {
		if (tObject.getBmp() != null)
			canvas.drawBitmap(tObject.getBmp(), xPos, yPos, null);
		else
			canvas.drawRect(xPos, yPos, xPos + width, yPos + height, tObject.getColor());
	}

	public void addItem(int objectType) {
		if(!isObstacle){
			item = ObjectGetter.setItem(objectType);
			hasItem = true;
		}
	}

	public boolean hasItem() {
		return hasItem;
	}

	public void removeItem() {
		item = null;
		hasItem = false;
	}
	
	public void removeThirdObject(){ //Sort of
		hasThirdLayer = false;
	}
	
	public void removeSecondObject(){ //Sort of
		hasSecondLayer = false;
		isObstacle = false;
	}

	// Basic stuff
	public void select() {
		selected = true;
	}

	public void unselect() {
		selected = false;
		lRem = rRem = uRem = dRem = 0;
	}
	
	public void removeSelection(int dir){
		switch (dir) {
		case Player.DOWN:
			dRem = 3;
			break;
		case Player.UP:
			uRem = 3;
			break;
		case Player.RIGHT:
			rRem = 3;
			break;
		case Player.LEFT:
			lRem = 3;
			break;
		}
	}

	public void getPlayerDir(int dir){
		switch (dir) {
		case Player.DOWN:
			dRem = 3;
			break;
		case Player.UP:
			uRem = 3;
			break;
		case Player.RIGHT:
			rRem = 3;
			break;
		case Player.LEFT:
			lRem = 3;
			break;
		}
	}
	
	public void removeSelectionAnimation(){
		if(lRem > 0){
			lRem+=selectSpeed;
			if(lRem + selectSpeed >= width){
				selected = false;
				lRem = 0;
			}
		}
		if(rRem > 0){
			rRem+=selectSpeed;
			if(rRem + selectSpeed >= width){
				selected = false;
				rRem = 0;
			}
		}
		if(uRem > 0){
			uRem+=selectSpeed;
			if(uRem + selectSpeed >= height){
				selected = false;
				uRem = 0;
			}
		}
		if(dRem > 0){
			dRem+=selectSpeed;
			if(dRem + selectSpeed >= height){
				selected = false;
				dRem = 0;
			}
		}
	}
	
	public float getStartPosX() {
		return xPos;
	}

	public float getStartPosY() {
		return yPos;
	}

	public float getEndPosX() {
		return xPos + width;
	}

	public float getEndPosY() {
		return yPos + height;
	}

	public int getWidth() {
		return width;
	}

	public int getHeight() {
		return height;
	}

	public boolean isObstacle() {
		return isObstacle;
	}

	public int getObjectType() {
		return objectType;
	}

	public int getSecondObjectType() {
		return sObjectType;
	}

	public int getThirdObjectType() {
		return tObjectType;
	}

	public void setObjectType(int objectType) {
		this.objectType = objectType;
	}

	public boolean hasSecondLayer() {
		return hasSecondLayer;
	}

	public boolean hasThirdLayer() {
		return hasThirdLayer;
	}

	public Item getItem() {
		return item;
	}

}
